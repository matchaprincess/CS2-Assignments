/** @file PasswordGenerator.cpp * /
  * @author Valerie Williams
  * @date 1/26/2023
  * @version 1
  * Program to generate a password of random characters given a specified length from the user.
  */

// include necessary libraries
#include <iostream> // for input and output
#include <algorithm> // for using algorithms
#include <string> // for using strings
#include <vector> // for using vectors
#include <random> // for using the random engine
using namespace std; // using the standard namespace

// function prototypes
vector<string> generatePasswords(int passwords, int chars);
void displayPasswords(vector<string> passwords);


/**
 * Allows a user to input the number of passwords and how many characters are in each. The amount of passwords specified are
 * then generated using the generatePasswords() function and displayed using the displayPasswords() function.
 */
int main(void) {

    // declaring necessary variables
    int numPasswords; // stores the number of passwords needed to be generated
    int numChars; // stores the number of characters to be in each password
    vector<string> passList; // stores the generated passwords
    
    // ask user for the number of passwords + characters per passord
    cout << "How many passwords? " << endl;
    cin >> numPasswords;
    cout << "How many characters in each? " << endl;
    cin >> numChars;
    
    // generate the passwords
    passList = generatePasswords(numPasswords, numChars);
    
    // display the passwords
    displayPasswords(passList);
    
    // status code
    return 0;
    
}

/**
 * Returns a vector containing passwords generated from taking a substring of the shuffled base string.
 *
 * @param passwords the amount of passwords to be generated by the function.
 * @param chars the amount of characters for each password to have.
 * @return a vector containing the generated passwords.
 */
vector<string> generatePasswords(int passwords, int chars){
    
    // declare necessary variables
    vector<string> passes;
    string base = "abcdefghijkmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ123456789!@#$%^&*";
    string sub;
    unsigned rnd = 0;
    
    // for loop to iterate as many times as passwords variable
    for (int i = 0; i < passwords; i++){
        
        // random shuffle the base string
        shuffle(base.begin(), base.end(), default_random_engine(rnd));
    
        // create a substring from the beginning of the randomly shuffled base string and 1 more than chars variable
        sub = base.substr(0, chars);
        
        // add the substring to the vector
        passes.push_back(sub);
        
    }
    
    // return the vector
    return passes;
    
}


/**
 * Displays the vector containing generated passwords out to the console.
 *
 * @param passwords vector containing generated passwords
 */
void displayPasswords(vector<string> passwords){
    
    // iterate through the vector 'passwords' and print out each element
    for (int i = 0; i < passwords.size(); i++){
        
        cout << passwords[i] << endl;
        
    }
    
    
}
